#!/usr/bin/env sh

STOW_TARGETS=(
  "root:/"
  "home:${HOME}"
)

print_help() {
  printf "Usage: $0 COMMAND [OPTIONS...]\n"
  printf "       $0 COMMAND [OPTIONS...] -p PROGRAM ... -p PROGRAM\n\n"
  printf "A tool for managing dotfile configurations using GNU Stow. By default, only the\n"
  printf "installed programs will get their dotfile configurations stowed.\n"
  printf "\nCommands:\n"
  printf "    up      Stow the dotfile configurations.\n"
  printf "    down    Unstow the dotfile configurations.\n"
  printf "\nOptions:\n"
  printf "    -d, --dir DOTFILE_DIR   Set the dotfile directory to DOTFILE_DIR (default is\n"
  printf "                            current directory). This directory must contain all\n"
  printf "                            the dotfile configurations to stow/unstow. Dotfile\n"
  printf "                            configurations must be laid out by target, then by\n"
  printf "                            program (e.g. a \".bashrc\" for \"bash\" must be placed\n"
  printf "                            in \"\$DOTFILE_DIR/home/bash/.bashrc\"). There are two\n"
  printf "                            supported targets: \"root\" and \"home\", respectively\n"
  printf "                            pointing at \"/\" and \"\$HOME\".\n"
  printf "    -p, --program PROGRAM   Stow/Unstow only the specified PROGRAM's dotfile\n"
  printf "                            configurations. With this option, PROGRAM does not\n"
  printf "                            have to be installed for stowing to be done.\n"
  printf "    -f, --force             Do not check if a program is installed (always\n"
  printf "                            enabled with --program).\n"
  printf "    -n, --no, --simulate    Do not actually make any filesystem changes.\n"
  printf "    -v, --verbose           Increase verbosity.\n"
  printf "    -h, --help              Show this help.\n"
  printf "\nExamples:\n"
  printf "    Stow every dotfiles for all installed programs (reading dotfiles from the\n"
  printf "    current directory):\n"
  printf "        $0 up\n\n"
  printf "    Stow every dotfiles for all programs (reading dotfiles from the current\n"
  printf "    directory):\n"
  printf "        $0 up --force\n\n"
  printf "    Stow every dotfiles for \"bash\" and \"vim\", reading dotfiles from the\n"
  printf "    directory ~/dotfiles:\n"
  printf "        $0 -d ~/dotfiles -p bash -p vim up\n\n"
  printf "    Unstow every dotfiles for \"vim\" (reading dotfiles from the current\n"
  printf "    directory):\n"
  printf "        $0 down -p vim\n"
}

should_stow() {
  local program="$1"

  [ $(command -v "${program}") ] \
    || [ -d "/etc/${program}" ] \
    || return 1
}

if [ $# -lt 1 ]; then
  printf "Invalid command: wrong number of arguments.\n"
  print_help
  exit 1
fi

command="$1"; shift
stow_actions=""
dotfile_dir=$(pwd)
# TODO: remove --simulate
stow_options=( "--simulate" )
programs=()
force=false

case ${command} in
  up)
    stow_action="--stow"
    ;;
  down)
    stow_action="--delete"
    force=true
    ;;
  -h|--help)
    print_help
    exit 0
    ;;
  *)
    printf "Invalid command: $1.\n"
    print_help
    exit 1
esac

while [ $# -gt 0 ]; do
  case $1 in
    -d|--dir)
      dotfile_dir=$2
      shift; shift
      ;;
    -p|--program)
      programs+=( "$2" )
      shift; shift
      ;;
    -f|--force)
      force=true
      shift
      ;;
    -n|--no|--simulate)
      stow_options+=( "$1" )
      shift
      ;;
    -v|--verbose)
      stow_options+=( "--verbose" )
      shift
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    *)
      printf "Invalid option: $1.\n"
      print_help
      exit 1
  esac
done

if [ ! -d "${dotfile_dir}" ]; then
  printf "Invalid argument: missing directory ${dotfile_dir}\n"
  print_help
  exit 1
fi

for target_desc in ${STOW_TARGETS[@]}; do
  IFS=: read stow_dirname target_dir <<< "${target_desc}"

  stow_dir="${dotfile_dir}/${stow_dirname}"
  if [ ! -d "${stow_dir}" ]; then continue; fi

  todo_programs=()
  ignored_programs=()
  if [ ${#programs[@]} -gt 0 ]; then
    for program in "${programs[@]}"; do
      if [ -d "${stow_dir}/${program}" ]; then
        todo_programs+=( "${program}" )
      fi
    done
  else
    for program in $(ls "${stow_dir}"); do
      if ${force} || $(should_stow ${program}); then
        todo_programs+=( "${program}" )
      fi
    done
  fi

  #if [ ${#todo_programs[@]} -gt 0 ]; then
  for program in "${todo_programs[@]}"; do
    action_msg="Managing dotfiles of \"${program}\" (wd=${target_dir})..."

    printf "${action_msg}\n"
    stow \
      ${stow_options[@]} \
      --dir "${stow_dir}" \
      --target "${target_dir}" \
      ${stow_action} ${program}
    if [ $? -eq 0 ]; then
      printf "${action_msg} \033[32mdone\033[0m\n"
    else
      printf "${action_msg} \033[31merror\033[0m\n"
    fi
  #fi
  done
done
