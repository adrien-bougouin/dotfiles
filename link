#!/usr/bin/env bash
set -euo pipefail

STOW_TARGETS=(
  "home:${HOME}"
)

print_help() {
cat << HELP
Usage: $0 COMMAND [OPTIONS...]
       $0 COMMAND [OPTIONS...] -p PROGRAM ... -p PROGRAM

A tool for managing dotfile configurations using GNU Stow. By default, only the
installed programs will get their dotfile configurations stowed.

Commands:
    up      Stow the dotfile configurations.
    down    Unstow the dotfile configurations.
    list    List available programs. By default, only installed programs are
            listed. Use --force to list all.

Options:
    -d, --dir DOTFILE_DIR   Set the dotfile directory to DOTFILE_DIR (default is
                            current directory). This directory must contain all
                            the dotfile configurations to stow/unstow. Dotfile
                            configurations must be laid out by target, then by
                            program (e.g. a ".bashrc" for "bash" must be placed
                            in "\$DOTFILE_DIR/home/bash/.bashrc").
                            There are two supported targets: "root" and "home",
                            respectively pointing at "/" and "\$HOME".
    -p, --program PROGRAM   Stow/Unstow only the specified PROGRAM's dotfile
                            configurations. With this option, PROGRAM does not
                            have to be installed for stowing to be done.
    -f, --force             Do not check if a program is installed (always
                            enabled with --program).
    -n, --no                Do not actually make any filesystem changes.
    -v, --verbose           Increase verbosity.
    -h, --help              Show this help.

Examples:
    Stow every dotfiles for all installed programs (reading dotfiles from the
    current directory):
        $0 up

    Stow every dotfiles for all programs (reading dotfiles from the current
    directory):
        $0 up --force

    Stow every dotfiles for "bash" and "vim", reading dotfiles from the
    directory ~/dotfiles:
        $0 -d ~/dotfiles -p bash -p vim up

    Unstow every dotfiles for "vim" (reading dotfiles from the current
    directory):
        $0 down -p vim
HELP
}

should_stow() {
  local program="$1"

  [[ "$(command -v "${program}")" ]] \
    || [[ -d "/etc/${program}" ]] \
    || return 1
}

if [[ $# -lt 1 ]]; then
  printf "Invalid command: wrong number of arguments.\n"
  print_help
  exit 1
fi

command="$1"; shift
stow_action=""
stow_options=()
dotfile_dir=$(pwd)
programs=()
force=false
list=false

case ${command} in
  up)
    stow_action="--stow"
    ;;
  down)
    stow_action="--delete"
    force=true
    ;;
  list)
    list=true
    ;;
  -h|--help)
    print_help
    exit 0
    ;;
  *)
    printf "Invalid command: %s.\n" "${command}"
    print_help
    exit 1
esac

while [[ $# -gt 0 ]]; do
  case $1 in
    -d|--dir)
      dotfile_dir=$2
      shift; shift
      ;;
    -p|--program)
      programs+=( "$2" )
      shift; shift
      ;;
    -f|--force)
      force=true
      shift
      ;;
    -n|--no)
      stow_options+=( "$1" )
      shift
      ;;
    -v|--verbose)
      stow_options+=( "$1" )
      shift
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    *)
      printf "Invalid option: %s.\n" "$1"
      print_help
      exit 1
  esac
done

if [[ ! -d "${dotfile_dir}" ]]; then
  printf "Invalid argument: missing directory %s.\n" "${dotfile_dir}"
  print_help
  exit 1
fi

if [[ ! $(command -v stow) ]]; then
  printf "\033[33m"
  cat INSTALL
  printf "\033[0m"
  exit 1
fi

for target_desc in "${STOW_TARGETS[@]}"; do
  IFS=: read -r location target_dir <<< "${target_desc}"

  stow_dir="${dotfile_dir}/${location}"
  if [[ ! -d "${stow_dir}" ]]; then continue; fi

  todo_programs=()
  skipped_programs=()
  if [[ ${#programs[@]} -gt 0 ]]; then
    for program in "${programs[@]}"; do
      if [[ -d "${stow_dir}/${program}" ]]; then
        todo_programs+=( "${program}" )
      else
        skipped_programs+=( "${program}" )
      fi
    done
  else
    for program_dir in "${stow_dir}"/*; do
      program=$(basename "${program_dir}")
      if ${force} || should_stow "${program}"; then
        todo_programs+=( "${program}" )
      else
        skipped_programs+=( "${program}" )
      fi
    done
  fi

  if ${list}; then
    printf "[target=%s]\n" "${target_dir}"

    if [[ ${#todo_programs[@]} -gt 0 ]]; then
      for program in "${todo_programs[@]}"; do
        printf "  \033[32m%s\033[0m" "${program}"
      done
    fi

    if [[ ${#skipped_programs[@]} -gt 0 ]]; then
      for program in "${skipped_programs[@]}"; do
        printf "  \033[31m%s\033[0m" "${program}"
      done
    fi

    printf "\n"
  else
    for program in "${todo_programs[@]}"; do
      action_msg="Stowing ${program} (location=${location}, wd=${target_dir})..."
      printf "%s\n" "${action_msg}"

      if stow \
        "${stow_options[@]:-}" \
        --dir "${stow_dir}" \
        --target "${target_dir}" \
        --ignore "^README$" \
        ${stow_action} "${program}"; then

        readme_file="${stow_dir}/${program}/README"
        if [[ "${stow_action}" == "--stow" ]] && [[ -f "${readme_file}" ]]; then
          printf "\033[33m\n"
          cat "${readme_file}"
          printf "\033[0m\n"
        fi

        printf "%s \033[32mdone\033[0m\n" "${action_msg}"
      else
        printf "%s \033[31merror\033[0m\n" "${action_msg}"
      fi
    done
  fi
done
